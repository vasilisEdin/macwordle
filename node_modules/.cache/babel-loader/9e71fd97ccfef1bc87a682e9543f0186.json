{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useCallback, useMemo, createContext, useRef, useContext, Fragment } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\n\nvar _reducers;\n\nvar DisclosureStates;\n\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"CloseDisclosure\"] = 1] = \"CloseDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 2] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 3] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 4] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 5] = \"UnlinkPanel\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.ToggleDisclosure] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers[ActionTypes.CloseDisclosure] = function (state) {\n  if (state.disclosureState === DisclosureStates.Closed) return state;\n  return _extends({}, state, {\n    disclosureState: DisclosureStates.Closed\n  });\n}, _reducers[ActionTypes.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers[ActionTypes.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar DisclosureContext = /*#__PURE__*/createContext(null);\nDisclosureContext.displayName = 'DisclosureContext';\n\nfunction useDisclosureContext(component) {\n  var context = useContext(DisclosureContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar DisclosureAPIContext = /*#__PURE__*/createContext(null);\nDisclosureAPIContext.displayName = 'DisclosureAPIContext';\n\nfunction useDisclosureAPIContext(component) {\n  var context = useContext(DisclosureAPIContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar DisclosurePanelContext = /*#__PURE__*/createContext(null);\nDisclosurePanelContext.displayName = 'DisclosurePanelContext';\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext);\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_DISCLOSURE_TAG = Fragment;\n\nfunction Disclosure(props) {\n  var _match2;\n\n  var _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.CloseDisclosure\n    });\n\n    var restoreElement = function () {\n      if (!focusableElement) return document.getElementById(buttonId);\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return document.getElementById(buttonId);\n    }();\n\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, buttonId]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [disclosureState, close]);\n  return React.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, React.createElement(DisclosureAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  }))));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n      state = _useDisclosureContext[0],\n      dispatch = _useDisclosureContext[1];\n\n  var internalButtonRef = useRef(null);\n  var buttonRef = useSyncRefs(internalButtonRef, ref);\n  var panelContext = useDisclosurePanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var handleKeyDown = useCallback(function (event) {\n    var _document$getElementB;\n\n    if (isWithinPanel) {\n      if (state.disclosureState === DisclosureStates.Closed) return;\n\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          (_document$getElementB = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB.focus();\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          break;\n      }\n    }\n  }, [dispatch, isWithinPanel, state.disclosureState]);\n  var handleKeyUp = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n\n    if (isWithinPanel) {\n      var _document$getElementB2;\n\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n      (_document$getElementB2 = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB2.focus();\n    } else {\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n    }\n  }, [dispatch, props.disabled, state.buttonId, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: buttonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n      state = _useDisclosureContext2[0],\n      dispatch = _useDisclosureContext2[1];\n\n  var _useDisclosureAPICont = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.')),\n      close = _useDisclosureAPICont.close;\n\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return React.createElement(DisclosurePanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  }));\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\nexport { Disclosure };","map":{"version":3,"mappings":";;;;;;;;;;;;;AA+BA,IAAKA,gBAAL;;AAAA,WAAKA,gBAAL,EAAKA;AACHA;AACAA;AAFF,GAAKA,gBAAgB,KAAhBA,gBAAgB,MAArB;;AAcA,IAAKC,WAAL;;AAAA,WAAKA,WAAL,EAAKA;AACHA;AACAA;AAEAA;AACAA;AAEAA;AACAA;AARF,GAAKA,WAAW,KAAXA,WAAW,MAAhB;;AAmBA,IAAIC,QAAQ,8BAMTD,WAAW,CAACE,gBANH,IAMsB,iBAAK;AAAA;;AAAA,sBAChCC,KADgC;AAEnCC,mBAAe,EAAEC,KAAK,CAACF,KAAK,CAACC,eAAP,uBACnBL,gBAAgB,CAACO,IADE,IACKP,gBAAgB,CAACQ,MADtB,SAEnBR,gBAAgB,CAACQ,MAFE,IAEOR,gBAAgB,CAACO,IAFxB;AAFa;AAN3B,aAaTN,WAAW,CAACQ,eAbH,IAaqB,iBAAK;AAClC,MAAIL,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACQ,MAA/C,EAAuD,OAAOJ,KAAP;AACvD,sBAAYA,KAAZ;AAAmBC,mBAAe,EAAEL,gBAAgB,CAACQ;AAArD;AAfQ,aAiBTP,WAAW,CAACS,SAjBH,cAiBcN,KAjBd;AAkBR,MAAIA,KAAK,CAACO,WAANP,KAAsB,IAA1B,EAAgC,OAAOA,KAAP;AAChC,sBAAYA,KAAZ;AAAmBO,eAAW,EAAE;AAAhC;AAnBQ,aAqBTV,WAAW,CAACW,WArBH,cAqBgBR,KArBhB;AAsBR,MAAIA,KAAK,CAACO,WAANP,KAAsB,KAA1B,EAAiC,OAAOA,KAAP;AACjC,sBAAYA,KAAZ;AAAmBO,eAAW,EAAE;AAAhC;AAvBQ,aAyBTV,WAAW,CAACY,WAzBH,cAyBgBT,KAzBhB,EAyBuBU,MAzBvB;AA0BR,MAAIV,KAAK,CAACW,QAANX,KAAmBU,MAAM,CAACC,QAA9B,EAAwC,OAAOX,KAAP;AACxC,sBAAYA,KAAZ;AAAmBW,YAAQ,EAAED,MAAM,CAACC;AAApC;AA3BQ,aA6BTd,WAAW,CAACe,UA7BH,cA6BeZ,KA7Bf,EA6BsBU,MA7BtB;AA8BR,MAAIV,KAAK,CAACa,OAANb,KAAkBU,MAAM,CAACG,OAA7B,EAAsC,OAAOb,KAAP;AACtC,sBAAYA,KAAZ;AAAmBa,WAAO,EAAEH,MAAM,CAACG;AAAnC;AA/BQ,aAAZ;AAmCA,IAAIC,iBAAiB,gBAAGC,aAAa,CAA8C,IAA9C,CAArC;AACAD,iBAAiB,CAACE,WAAlBF,GAAgC,mBAAhCA;;AAEA,SAASG,oBAAT,CAA8BC,SAA9B;AACE,MAAIC,OAAO,GAAGC,UAAU,CAACN,iBAAD,CAAxB;;AACA,MAAIK,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAIE,GAAG,GAAG,IAAIC,KAAJ,OAAcJ,SAAd,iCAAmDK,UAAU,CAACC,IAA9D,oBAAV;AACA,QAAIF,KAAK,CAACG,iBAAV,EAA6BH,KAAK,CAACG,iBAANH,CAAwBD,GAAxBC,EAA6BL,oBAA7BK;AAC7B,UAAMD,GAAN;AACD;;AACD,SAAOF,OAAP;AACD;;AAED,IAAIO,oBAAoB,gBAAGX,aAAa,CAE9B,IAF8B,CAAxC;AAGAW,oBAAoB,CAACV,WAArBU,GAAmC,sBAAnCA;;AAEA,SAASC,uBAAT,CAAiCT,SAAjC;AACE,MAAIC,OAAO,GAAGC,UAAU,CAACM,oBAAD,CAAxB;;AACA,MAAIP,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAIE,GAAG,GAAG,IAAIC,KAAJ,OAAcJ,SAAd,iCAAmDK,UAAU,CAACC,IAA9D,oBAAV;AACA,QAAIF,KAAK,CAACG,iBAAV,EAA6BH,KAAK,CAACG,iBAANH,CAAwBD,GAAxBC,EAA6BK,uBAA7BL;AAC7B,UAAMD,GAAN;AACD;;AACD,SAAOF,OAAP;AACD;;AAED,IAAIS,sBAAsB,gBAAGb,aAAa,CAAgB,IAAhB,CAA1C;AACAa,sBAAsB,CAACZ,WAAvBY,GAAqC,wBAArCA;;AAEA,SAASC,yBAAT;AACE,SAAOT,UAAU,CAACQ,sBAAD,CAAjB;AACD;;AAED,SAASE,YAAT,CAAsB9B,KAAtB,EAA8CU,MAA9C;AACE,SAAOR,KAAK,CAACQ,MAAM,CAACqB,IAAR,EAAcjC,QAAd,EAAwBE,KAAxB,EAA+BU,MAA/B,CAAZ;AACD,C,CAAA;;;AAID,IAAIsB,sBAAsB,GAAGC,QAA7B;;SAMgBV,WACdW;;;2BAImDA,MAA7CC;MAAAA,8CAAc,KAAdA,GAAcC;MAAUC,iDAAqBH,KAArBG,EAAqBH,eAArBG;;AAC9B,MAAI1B,QAAQ,qCAAmC2B,KAAK,EAApD;AACA,MAAIzB,OAAO,oCAAkCyB,KAAK,EAAlD;AAEA,MAAIC,UAAU,GAAGC,UAAU,CAACV,YAAD,EAAe;AACxC7B,mBAAe,EAAEkC,WAAW,GAAGvC,gBAAgB,CAACO,IAApB,GAA2BP,gBAAgB,CAACQ,MADhC;AAExCG,eAAW,EAAE,KAF2B;AAGxCI,YAAQ,EAARA,QAHwC;AAIxCE,WAAO,EAAPA;AAJwC,GAAf,CAA3B;MAMOZ,kBAA+BsC,cAA/BtC;MAAmBwC,WAAYF;AAEtCG,WAAS,CAAC;AAAA,WAAMD,QAAQ,CAAC;AAAEV,UAAI,EAAElC,WAAW,CAACY,WAApB;AAAiCE,cAAQ,EAARA;AAAjC,KAAD,CAAd;AAAD,KAA8D,CAACA,QAAD,EAAW8B,QAAX,CAA9D,CAATC;AACAA,WAAS,CAAC;AAAA,WAAMD,QAAQ,CAAC;AAAEV,UAAI,EAAElC,WAAW,CAACe,UAApB;AAAgCC,aAAO,EAAPA;AAAhC,KAAD,CAAd;AAAD,KAA4D,CAACA,OAAD,EAAU4B,QAAV,CAA5D,CAATC;AAEA,MAAIC,KAAK,GAAGC,WAAW,CACrB,UAACC,gBAAD;AACEJ,YAAQ,CAAC;AAAEV,UAAI,EAAElC,WAAW,CAACQ;AAApB,KAAD,CAARoC;;AAEA,QAAIK,cAAc,GAAI;AACpB,UAAI,CAACD,gBAAL,EAAuB,OAAOE,QAAQ,CAACC,cAATD,CAAwBpC,QAAxBoC,CAAP;AACvB,UAAIF,gBAAgB,YAAYI,WAAhC,EAA6C,OAAOJ,gBAAP;AAC7C,UAAIA,gBAAgB,CAACK,OAAjBL,YAAoCI,WAAxC,EAAqD,OAAOJ,gBAAgB,CAACK,OAAxB;AAErD,aAAOH,QAAQ,CAACC,cAATD,CAAwBpC,QAAxBoC,CAAP;AALmB,KAAC,EAAtB;;AAQAD,kBAAc,QAAdA,0BAAc,CAAEK,KAAhBL;AAZmB,KAcrB,CAACL,QAAD,EAAW9B,QAAX,CAdqB,CAAvB;AAiBA,MAAIyC,GAAG,GAAGC,OAAO,CAA2C;AAAA,WAAO;AAAEV,WAAK,EAALA;AAAF,KAAP;AAA3C,KAA8D,CAACA,KAAD,CAA9D,CAAjB;AAEA,MAAIW,IAAI,GAAGD,OAAO,CAChB;AAAA,WAAO;AAAEE,UAAI,EAAEtD,eAAe,KAAKL,gBAAgB,CAACO,IAA7C;AAAmDwC,WAAK,EAALA;AAAnD,KAAP;AADgB,KAEhB,CAAC1C,eAAD,EAAkB0C,KAAlB,CAFgB,CAAlB;AAKA,SACEa,oBAAC1C,iBAAiB,CAAC2C,QAAnBD;AAA4BE,SAAK,EAAEnB;AAAnC,KACEiB,oBAAC9B,oBAAoB,CAAC+B,QAAtBD;AAA+BE,SAAK,EAAEN;AAAtC,KACEI,oBAACG,kBAADH;AACEE,SAAK,EAAExD,KAAK,CAACD,eAAD,yBACTL,gBAAgB,CAACO,IADR,IACeyD,KAAK,CAACzD,IADrB,UAETP,gBAAgB,CAACQ,MAFR,IAEiBwD,KAAK,CAACxD,MAFvB;AADd,KAMGyD,MAAM,CAAC;AACN3B,SAAK,EAAEG,gBADD;AAENiB,QAAI,EAAJA,IAFM;AAGNQ,cAAU,EAAE9B,sBAHN;AAINR,QAAI,EAAE;AAJA,GAAD,CANTgC,CADFA,CADFA,CADF;AAmBD,C,CAAA;;;AAID,IAAIO,kBAAkB,GAAG,QAAzB;AAYA,IAAIC,MAAM,gBAAGC,gBAAgB,CAAC,SAASD,MAAT,CAC5B9B,KAD4B,EAE5BgC,GAF4B;8BAIJjD,oBAAoB,CAAC,CAACM,UAAU,CAACC,IAAZ,EAAkBwC,MAAM,CAACxC,IAAzB,EAA+B2C,IAA/B,CAAoC,GAApC,CAAD;MAAvCnE;MAAOyC;;AACZ,MAAI2B,iBAAiB,GAAGC,MAAM,CAA2B,IAA3B,CAA9B;AACA,MAAIC,SAAS,GAAGC,WAAW,CAACH,iBAAD,EAAoBF,GAApB,CAA3B;AAEA,MAAIM,YAAY,GAAG3C,yBAAyB,EAA5C;AACA,MAAI4C,aAAa,GAAGD,YAAY,KAAK,IAAjBA,GAAwB,KAAxBA,GAAgCA,YAAY,KAAKxE,KAAK,CAACa,OAA3E;AAEA,MAAI6D,aAAa,GAAG9B,WAAW,CAC7B,UAAC+B,KAAD;;;AACE,QAAIF,aAAJ,EAAmB;AACjB,UAAIzE,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACQ,MAA/C,EAAuD;;AAEvD,cAAQuE,KAAK,CAACC,GAAd;AACE,aAAKC,IAAI,CAACC,KAAV;AACA,aAAKD,IAAI,CAACE,KAAV;AACEJ,eAAK,CAACK,cAANL;AACAA,eAAK,CAACM,eAANN;AACAlC,kBAAQ,CAAC;AAAEV,gBAAI,EAAElC,WAAW,CAACE;AAApB,WAAD,CAAR0C;AACA,2CAAQ,CAACO,cAATD,CAAwB/C,KAAK,CAACW,QAA9BoC,4CAAyCI,KAAzC;AACA;AAPJ;AAHF,WAYO;AACL,cAAQwB,KAAK,CAACC,GAAd;AACE,aAAKC,IAAI,CAACC,KAAV;AACA,aAAKD,IAAI,CAACE,KAAV;AACEJ,eAAK,CAACK,cAANL;AACAA,eAAK,CAACM,eAANN;AACAlC,kBAAQ,CAAC;AAAEV,gBAAI,EAAElC,WAAW,CAACE;AAApB,WAAD,CAAR0C;AACA;AANJ;AAQD;AAvB0B,KAyB7B,CAACA,QAAD,EAAWgC,aAAX,EAA0BzE,KAAK,CAACC,eAAhC,CAzB6B,CAA/B;AA4BA,MAAIiF,WAAW,GAAGtC,WAAW,CAAC,UAAC+B,KAAD;AAC5B,YAAQA,KAAK,CAACC,GAAd;AACE,WAAKC,IAAI,CAACC,KAAV;AACE;AACA;AACA;AACAH,aAAK,CAACK,cAANL;AACA;AANJ;AAD2B,KAS1B,EAT0B,CAA7B;AAWA,MAAIQ,WAAW,GAAGvC,WAAW,CAC3B,UAAC+B,KAAD;AACE,QAAIS,wBAAwB,CAACT,KAAK,CAACU,aAAP,CAA5B,EAAmD;AACnD,QAAInD,KAAK,CAACoD,QAAV,EAAoB;;AAEpB,QAAIb,aAAJ,EAAmB;AAAA;;AACjBhC,cAAQ,CAAC;AAAEV,YAAI,EAAElC,WAAW,CAACE;AAApB,OAAD,CAAR0C;AACA,wCAAQ,CAACO,cAATD,CAAwB/C,KAAK,CAACW,QAA9BoC,6CAAyCI,KAAzC;AAFF,WAGO;AACLV,cAAQ,CAAC;AAAEV,YAAI,EAAElC,WAAW,CAACE;AAApB,OAAD,CAAR0C;AACD;AAVwB,KAY3B,CAACA,QAAD,EAAWP,KAAK,CAACoD,QAAjB,EAA2BtF,KAAK,CAACW,QAAjC,EAA2C8D,aAA3C,CAZ2B,CAA7B;AAeA,MAAInB,IAAI,GAAGD,OAAO,CAChB;AAAA,WAAO;AAAEE,UAAI,EAAEvD,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACO;AAAnD,KAAP;AADgB,KAEhB,CAACH,KAAD,CAFgB,CAAlB;AAKA,MAAI+B,IAAI,GAAGwD,oBAAoB,CAACrD,KAAD,EAAQkC,iBAAR,CAA/B;AACA,MAAI/B,gBAAgB,GAAGH,KAAvB;AACA,MAAIsD,cAAc,GAAGf,aAAa,GAC9B;AAAEP,OAAG,EAAEI,SAAP;AAAkBvC,QAAI,EAAJA,IAAlB;AAAwB0D,aAAS,EAAEf,aAAnC;AAAkDgB,WAAO,EAAEP;AAA3D,GAD8B,GAE9B;AACEjB,OAAG,EAAEI,SADP;AAEEqB,MAAE,EAAE3F,KAAK,CAACW,QAFZ;AAGEoB,QAAI,EAAJA,IAHF;AAIE,qBAAiBG,KAAK,CAACoD,QAANpD,GACb0D,SADa1D,GAEblC,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACO,IANjD;AAOE,qBAAiBH,KAAK,CAACO,WAANP,GAAoBA,KAAK,CAACa,OAA1Bb,GAAoC4F,SAPvD;AAQEH,aAAS,EAAEf,aARb;AASEmB,WAAO,EAAEX,WATX;AAUEQ,WAAO,EAAEP;AAVX,GAFJ;AAeA,SAAOtB,MAAM,CAAC;AACZ3B,SAAK,eAAOG,gBAAP,EAA4BmD,cAA5B,CADO;AAEZlC,QAAI,EAAJA,IAFY;AAGZQ,cAAU,EAAEC,kBAHA;AAIZvC,QAAI,EAAE;AAJM,GAAD,CAAb;AAvF2B,EAA7B,C,CAAA;;AAiGA,IAAIsE,iBAAiB,GAAG,KAAxB;AAOA,IAAIC,mBAAmB,GAAGC,QAAQ,CAACC,cAATD,GAA0BA,QAAQ,CAACE,MAA7D;AAEA,IAAIC,KAAK,gBAAGlC,gBAAgB,CAAC,SAASkC,KAAT,CAC3BjE,KAD2B,EAG3BgC,GAH2B;+BAKHjD,oBAAoB,CAAC,CAACM,UAAU,CAACC,IAAZ,EAAkB2E,KAAK,CAAC3E,IAAxB,EAA8B2C,IAA9B,CAAmC,GAAnC,CAAD;MAAvCnE;MAAOyC;;8BACId,uBAAuB,CAAC,CAACJ,UAAU,CAACC,IAAZ,EAAkB2E,KAAK,CAAC3E,IAAxB,EAA8B2C,IAA9B,CAAmC,GAAnC,CAAD;MAAjCxB;;AAEN,MAAIyD,QAAQ,GAAG7B,WAAW,CAACL,GAAD,EAAM;AAC9B,QAAIlE,KAAK,CAACO,WAAV,EAAuB;AACvBkC,YAAQ,CAAC;AAAEV,UAAI,EAAElC,WAAW,CAACS;AAApB,KAAD,CAARmC;AAFwB,IAA1B;AAKA,MAAI4D,mBAAmB,GAAGC,aAAa,EAAvC;;AACA,MAAIC,OAAO,GAAI;AACb,QAAIF,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,aAAOA,mBAAmB,KAAKzC,KAAK,CAACzD,IAArC;AACD;;AAED,WAAOH,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACO,IAAlD;AALY,GAAC,EAAf,CAd2B,CAc3B;;;AASAuC,WAAS,CAAC;AAAA,WAAM;AAAA,aAAMD,QAAQ,CAAC;AAAEV,YAAI,EAAElC,WAAW,CAACW;AAApB,OAAD,CAAd;AAAN;AAAD,KAA0D,CAACiC,QAAD,CAA1D,CAATC,CAvB2B,CAuB3B;;AAGAA,WAAS,CAAC;;;AACR,QAAI1C,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACQ,MAA3CJ,uBAAsDkC,KAAK,CAACsE,OAA5D,6BAAuE,IAAvExG,CAAJ,EAAkF;AAChFyC,cAAQ,CAAC;AAAEV,YAAI,EAAElC,WAAW,CAACW;AAApB,OAAD,CAARiC;AACD;AAHM,KAIN,CAACzC,KAAK,CAACC,eAAP,EAAwBiC,KAAK,CAACsE,OAA9B,EAAuC/D,QAAvC,CAJM,CAATC;AAMA,MAAIY,IAAI,GAAGD,OAAO,CAChB;AAAA,WAAO;AAAEE,UAAI,EAAEvD,KAAK,CAACC,eAAND,KAA0BJ,gBAAgB,CAACO,IAAnD;AAAyDwC,WAAK,EAALA;AAAzD,KAAP;AADgB,KAEhB,CAAC3C,KAAD,EAAQ2C,KAAR,CAFgB,CAAlB;AAIA,MAAI6C,cAAc,GAAG;AACnBtB,OAAG,EAAEkC,QADc;AAEnBT,MAAE,EAAE3F,KAAK,CAACa;AAFS,GAArB;AAIA,MAAIwB,gBAAgB,GAAGH,KAAvB;AAEA,SACEsB,oBAAC5B,sBAAsB,CAAC6B,QAAxBD;AAAiCE,SAAK,EAAE1D,KAAK,CAACa;AAA9C,KACGgD,MAAM,CAAC;AACN3B,SAAK,eAAOG,gBAAP,EAA4BmD,cAA5B,CADC;AAENlC,QAAI,EAAJA,IAFM;AAGNQ,cAAU,EAAEgC,iBAHN;AAINW,YAAQ,EAAEV,mBAJJ;AAKNQ,WAAO,EAAPA,OALM;AAMN/E,QAAI,EAAE;AANA,GAAD,CADTgC,CADF;AA1C0B,EAA5B,C,CAAA;;AA0DAjC,UAAU,CAACyC,MAAXzC,GAAoByC,MAApBzC;AACAA,UAAU,CAAC4E,KAAX5E,GAAmB4E,KAAnB5E","names":["DisclosureStates","ActionTypes","reducers","ToggleDisclosure","state","disclosureState","match","Open","Closed","CloseDisclosure","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","action","buttonId","SetPanelId","panelId","DisclosureContext","createContext","displayName","useDisclosureContext","component","context","useContext","err","Error","Disclosure","name","captureStackTrace","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","useDisclosurePanelContext","stateReducer","type","DEFAULT_DISCLOSURE_TAG","Fragment","props","defaultOpen","_props$defaultOpen","passthroughProps","useId","reducerBag","useReducer","dispatch","useEffect","close","useCallback","focusableElement","restoreElement","document","getElementById","HTMLElement","current","focus","api","useMemo","slot","open","React","Provider","value","OpenClosedProvider","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","internalButtonRef","useRef","buttonRef","useSyncRefs","panelContext","isWithinPanel","handleKeyDown","event","key","Keys","Space","Enter","preventDefault","stopPropagation","handleKeyUp","handleClick","isDisabledReactIssue7711","currentTarget","disabled","useResolveButtonType","propsWeControl","onKeyDown","onClick","id","undefined","onKeyUp","DEFAULT_PANEL_TAG","PanelRenderFeatures","Features","RenderStrategy","Static","Panel","panelRef","usesOpenClosedState","useOpenClosed","visible","unmount","features"],"sources":["C:\\Users\\Vasilis\\Documents\\GitHub\\vasilisEdin\\node_modules\\@headlessui\\react\\src\\components\\disclosure\\disclosure.tsx"],"sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n"]},"metadata":{},"sourceType":"module"}