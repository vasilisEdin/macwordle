{"ast":null,"code":"import{CompletedRow}from'./CompletedRow';import{CurrentRow}from'./CurrentRow';import{EmptyRow}from'./EmptyRow';import{CONFIG}from'../../constants/config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Grid=function Grid(_ref){var guesses=_ref.guesses,currentGuess=_ref.currentGuess;var empties=guesses.length<CONFIG.tries-1?Array.from(Array(CONFIG.tries-1-guesses.length)):[];return/*#__PURE__*/_jsxs(\"div\",{className:\"pb-6\",children:[guesses.map(function(guess,i){return/*#__PURE__*/_jsx(CompletedRow,{guess:guess},i);}),guesses.length<CONFIG.tries&&/*#__PURE__*/_jsx(CurrentRow,{guess:currentGuess}),empties.map(function(_,i){return/*#__PURE__*/_jsx(EmptyRow,{},i);})]});};","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/nodetest/wordle/AnyLanguage-Wordle/src/components/grid/Grid.tsx"],"names":["CompletedRow","CurrentRow","EmptyRow","CONFIG","Grid","guesses","currentGuess","empties","length","tries","Array","from","map","guess","i","_"],"mappings":"AAAA,OAASA,YAAT,KAA6B,gBAA7B,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,QAAT,KAAyB,YAAzB,CACA,OAASC,MAAT,KAAuB,wBAAvB,C,wFAOA,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAsC,IAAnCC,CAAAA,OAAmC,MAAnCA,OAAmC,CAA1BC,YAA0B,MAA1BA,YAA0B,CACxD,GAAMC,CAAAA,OAAO,CACXF,OAAO,CAACG,MAAR,CAAiBL,MAAM,CAACM,KAAP,CAAe,CAAhC,CACIC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,MAAM,CAACM,KAAP,CAAe,CAAf,CAAmBJ,OAAO,CAACG,MAA5B,CAAhB,CADJ,CAEI,EAHN,CAKA,mBACE,aAAK,SAAS,CAAC,MAAf,WACGH,OAAO,CAACO,GAAR,CAAY,SAACC,KAAD,CAAQC,CAAR,qBACX,KAAC,YAAD,EAAsB,KAAK,CAAED,KAA7B,EAAmBC,CAAnB,CADW,EAAZ,CADH,CAIGT,OAAO,CAACG,MAAR,CAAiBL,MAAM,CAACM,KAAxB,eAAiC,KAAC,UAAD,EAAY,KAAK,CAAEH,YAAnB,EAJpC,CAKGC,OAAO,CAACK,GAAR,CAAY,SAACG,CAAD,CAAID,CAAJ,qBACX,KAAC,QAAD,IAAeA,CAAf,CADW,EAAZ,CALH,GADF,CAWD,CAjBM","sourcesContent":["import { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\nimport { CONFIG } from '../../constants/config'\n\ntype Props = {\n  guesses: string[][]\n  currentGuess: string[]\n}\n\nexport const Grid = ({ guesses, currentGuess }: Props) => {\n  const empties =\n    guesses.length < CONFIG.tries - 1\n      ? Array.from(Array(CONFIG.tries - 1 - guesses.length))\n      : []\n\n  return (\n    <div className=\"pb-6\">\n      {guesses.map((guess, i) => (\n        <CompletedRow key={i} guess={guess} />\n      ))}\n      {guesses.length < CONFIG.tries && <CurrentRow guess={currentGuess} />}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}