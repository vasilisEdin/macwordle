{"ast":null,"code":"import i18next from'i18next';import{initReactI18next}from'react-i18next';import{CONFIG}from'./constants/config';import HttpApi from'i18next-http-backend';import LanguageDetector from'i18next-browser-languagedetector';export var localeLanguageKey='i18nextLng';i18next.use(HttpApi)// pass the i18n instance to react-i18next.\n.use(initReactI18next)// detect language from browser - this will check the localstorage localeLanguageKey and use the declared CONFIG.defaultLang otherwise\n.use(LanguageDetector)// init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({backend:{loadPath:\"\".concat(process.env.PUBLIC_URL,\"/locales/{{lng}}/{{ns}}.json\")},fallbackLng:CONFIG.defaultLang,debug:false,interpolation:{escapeValue:false// not needed for react as it escapes by default\n},react:{useSuspense:false},saveMissing:true});export default i18next;","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/nodetest/wordle/AnyLanguage-Wordle/src/i18n.ts"],"names":["i18next","initReactI18next","CONFIG","HttpApi","LanguageDetector","localeLanguageKey","use","init","backend","loadPath","process","env","PUBLIC_URL","fallbackLng","defaultLang","debug","interpolation","escapeValue","react","useSuspense","saveMissing"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CACA,OAASC,gBAAT,KAAiC,eAAjC,CACA,OAASC,MAAT,KAAuB,oBAAvB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kCAA7B,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,YAA1B,CAEPL,OAAO,CACJM,GADH,CACOH,OADP,CAEE;AAFF,CAGGG,GAHH,CAGOL,gBAHP,CAIE;AAJF,CAKGK,GALH,CAKOF,gBALP,CAME;AACA;AAPF,CAQGG,IARH,CAQQ,CACJC,OAAO,CAAE,CACPC,QAAQ,WAAKC,OAAO,CAACC,GAAR,CAAYC,UAAjB,gCADD,CADL,CAIJC,WAAW,CAAEX,MAAM,CAACY,WAJhB,CAKJC,KAAK,CAAE,KALH,CAOJC,aAAa,CAAE,CACbC,WAAW,CAAE,KAAO;AADP,CAPX,CAUJC,KAAK,CAAE,CACLC,WAAW,CAAE,KADR,CAVH,CAaJC,WAAW,CAAE,IAbT,CARR,EAwBA,cAAepB,CAAAA,OAAf","sourcesContent":["import i18next from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport { CONFIG } from './constants/config'\nimport HttpApi from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nexport const localeLanguageKey = 'i18nextLng'\n\ni18next\n  .use(HttpApi)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // detect language from browser - this will check the localstorage localeLanguageKey and use the declared CONFIG.defaultLang otherwise\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    backend: {\n      loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`,\n    },\n    fallbackLng: CONFIG.defaultLang,\n    debug: false,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    react: {\n      useSuspense: false,\n    },\n    saveMissing: true,\n  })\n\nexport default i18next\n"]},"metadata":{},"sourceType":"module"}