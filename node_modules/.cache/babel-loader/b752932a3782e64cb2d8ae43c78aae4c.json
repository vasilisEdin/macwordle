{"ast":null,"code":"import { loadStatsFromLocalStorage, saveStatsToLocalStorage } from './localStorage';\nimport { CONFIG } from '../constants/config'; // In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (gameStats, count) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats\n  };\n  stats.totalGames += 1;\n\n  if (count > CONFIG.tries - 1) {\n    // A fail situation\n    stats.currentStreak = 0;\n    stats.gamesFailed += 1;\n  } else {\n    stats.winDistribution[count] += 1;\n    stats.currentStreak += 1;\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak;\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats);\n  saveStatsToLocalStorage(stats);\n  return stats;\n};\nconst defaultStats = {\n  winDistribution: [0, 0, 0, 0, 0, 0],\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0\n};\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats;\n};\n\nconst getSuccessRate = gameStats => {\n  const {\n    totalGames,\n    gamesFailed\n  } = gameStats;\n  return Math.round(100 * (totalGames - gamesFailed) / Math.max(totalGames, 1));\n};","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/nodetest/wordle/AnyLanguage-Wordle/src/lib/stats.ts"],"names":["loadStatsFromLocalStorage","saveStatsToLocalStorage","CONFIG","addStatsForCompletedGame","gameStats","count","stats","totalGames","tries","currentStreak","gamesFailed","winDistribution","bestStreak","successRate","getSuccessRate","defaultStats","loadStats","Math","round","max"],"mappings":"AAAA,SAEEA,yBAFF,EAGEC,uBAHF,QAIO,gBAJP;AAMA,SAASC,MAAT,QAAuB,qBAAvB,C,CAEA;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CACtCC,SADsC,EAEtCC,KAFsC,KAGnC;AACH;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGF;AAAL,GAAd;AAEAE,EAAAA,KAAK,CAACC,UAAN,IAAoB,CAApB;;AAEA,MAAIF,KAAK,GAAGH,MAAM,CAACM,KAAP,GAAe,CAA3B,EAA8B;AAC5B;AACAF,IAAAA,KAAK,CAACG,aAAN,GAAsB,CAAtB;AACAH,IAAAA,KAAK,CAACI,WAAN,IAAqB,CAArB;AACD,GAJD,MAIO;AACLJ,IAAAA,KAAK,CAACK,eAAN,CAAsBN,KAAtB,KAAgC,CAAhC;AACAC,IAAAA,KAAK,CAACG,aAAN,IAAuB,CAAvB;;AAEA,QAAIH,KAAK,CAACM,UAAN,GAAmBN,KAAK,CAACG,aAA7B,EAA4C;AAC1CH,MAAAA,KAAK,CAACM,UAAN,GAAmBN,KAAK,CAACG,aAAzB;AACD;AACF;;AAEDH,EAAAA,KAAK,CAACO,WAAN,GAAoBC,cAAc,CAACR,KAAD,CAAlC;AAEAL,EAAAA,uBAAuB,CAACK,KAAD,CAAvB;AACA,SAAOA,KAAP;AACD,CA1BM;AA4BP,MAAMS,YAAuB,GAAG;AAC9BJ,EAAAA,eAAe,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CADa;AAE9BD,EAAAA,WAAW,EAAE,CAFiB;AAG9BD,EAAAA,aAAa,EAAE,CAHe;AAI9BG,EAAAA,UAAU,EAAE,CAJkB;AAK9BL,EAAAA,UAAU,EAAE,CALkB;AAM9BM,EAAAA,WAAW,EAAE;AANiB,CAAhC;AASA,OAAO,MAAMG,SAAS,GAAG,MAAM;AAC7B,SAAOhB,yBAAyB,MAAMe,YAAtC;AACD,CAFM;;AAIP,MAAMD,cAAc,GAAIV,SAAD,IAA0B;AAC/C,QAAM;AAAEG,IAAAA,UAAF;AAAcG,IAAAA;AAAd,MAA8BN,SAApC;AAEA,SAAOa,IAAI,CAACC,KAAL,CACJ,OAAOX,UAAU,GAAGG,WAApB,CAAD,GAAqCO,IAAI,CAACE,GAAL,CAASZ,UAAT,EAAqB,CAArB,CADhC,CAAP;AAGD,CAND","sourcesContent":["import {\n  GameStats,\n  loadStatsFromLocalStorage,\n  saveStatsToLocalStorage,\n} from './localStorage'\n\nimport { CONFIG } from '../constants/config'\n\n// In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (\n  gameStats: GameStats,\n  count: number\n) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats }\n\n  stats.totalGames += 1\n\n  if (count > CONFIG.tries - 1) {\n    // A fail situation\n    stats.currentStreak = 0\n    stats.gamesFailed += 1\n  } else {\n    stats.winDistribution[count] += 1\n    stats.currentStreak += 1\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats)\n\n  saveStatsToLocalStorage(stats)\n  return stats\n}\n\nconst defaultStats: GameStats = {\n  winDistribution: [0, 0, 0, 0, 0, 0],\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0,\n}\n\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats\n}\n\nconst getSuccessRate = (gameStats: GameStats) => {\n  const { totalGames, gamesFailed } = gameStats\n\n  return Math.round(\n    (100 * (totalGames - gamesFailed)) / Math.max(totalGames, 1)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}