{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useRef, useMemo, useCallback, createContext, useContext } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render } from '../../utils/render.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { focusIn, FocusResult, Focus } from '../../utils/focus-management.esm.js';\nimport { useDescriptions, Description } from '../description/description.esm.js';\nimport { useTreeWalker } from '../../hooks/use-tree-walker.esm.js';\nimport { useFlags } from '../../hooks/use-flags.esm.js';\nimport { useLabels, Label } from '../label/label.esm.js';\n\nvar _reducers;\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"RegisterOption\"] = 0] = \"RegisterOption\";\n  ActionTypes[ActionTypes[\"UnregisterOption\"] = 1] = \"UnregisterOption\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.RegisterOption] = function (state, action) {\n  return _extends({}, state, {\n    options: [].concat(state.options, [{\n      id: action.id,\n      element: action.element,\n      propsRef: action.propsRef\n    }])\n  });\n}, _reducers[ActionTypes.UnregisterOption] = function (state, action) {\n  var options = state.options.slice();\n  var idx = state.options.findIndex(function (radio) {\n    return radio.id === action.id;\n  });\n  if (idx === -1) return state;\n  options.splice(idx, 1);\n  return _extends({}, state, {\n    options: options\n  });\n}, _reducers);\nvar RadioGroupContext = /*#__PURE__*/createContext(null);\nRadioGroupContext.displayName = 'RadioGroupContext';\n\nfunction useRadioGroupContext(component) {\n  var context = useContext(RadioGroupContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + RadioGroup.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_RADIO_GROUP_TAG = 'div';\n\nfunction RadioGroup(props) {\n  var value = props.value,\n      onChange = props.onChange,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"onChange\", \"disabled\"]);\n\n  var _useReducer = useReducer(stateReducer, {\n    options: []\n  }),\n      options = _useReducer[0].options,\n      dispatch = _useReducer[1];\n\n  var _useLabels = useLabels(),\n      labelledby = _useLabels[0],\n      LabelProvider = _useLabels[1];\n\n  var _useDescriptions = useDescriptions(),\n      describedby = _useDescriptions[0],\n      DescriptionProvider = _useDescriptions[1];\n\n  var id = \"headlessui-radiogroup-\" + useId();\n  var radioGroupRef = useRef(null);\n  var firstOption = useMemo(function () {\n    return options.find(function (option) {\n      if (option.propsRef.current.disabled) return false;\n      return true;\n    });\n  }, [options]);\n  var containsCheckedOption = useMemo(function () {\n    return options.some(function (option) {\n      return option.propsRef.current.value === value;\n    });\n  }, [options, value]);\n  var triggerChange = useCallback(function (nextValue) {\n    var _options$find;\n\n    if (disabled) return false;\n    if (nextValue === value) return false;\n    var nextOption = (_options$find = options.find(function (option) {\n      return option.propsRef.current.value === nextValue;\n    })) == null ? void 0 : _options$find.propsRef.current;\n    if (nextOption == null ? void 0 : nextOption.disabled) return false;\n    onChange(nextValue);\n    return true;\n  }, [onChange, value, disabled, options]);\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept: function accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT;\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP;\n      return NodeFilter.FILTER_ACCEPT;\n    },\n    walk: function walk(node) {\n      node.setAttribute('role', 'none');\n    }\n  });\n  var handleKeyDown = useCallback(function (event) {\n    var container = radioGroupRef.current;\n    if (!container) return;\n    var all = options.filter(function (option) {\n      return option.propsRef.current.disabled === false;\n    }).map(function (radio) {\n      return radio.element.current;\n    });\n\n    switch (event.key) {\n      case Keys.ArrowLeft:\n      case Keys.ArrowUp:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n          var result = focusIn(all, Focus.Previous | Focus.WrapAround);\n\n          if (result === FocusResult.Success) {\n            var activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n            if (activeOption) triggerChange(activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.ArrowRight:\n      case Keys.ArrowDown:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _result = focusIn(all, Focus.Next | Focus.WrapAround);\n\n          if (_result === FocusResult.Success) {\n            var _activeOption = options.find(function (option) {\n              return option.element.current === document.activeElement;\n            });\n\n            if (_activeOption) triggerChange(_activeOption.propsRef.current.value);\n          }\n        }\n        break;\n\n      case Keys.Space:\n        {\n          event.preventDefault();\n          event.stopPropagation();\n\n          var _activeOption2 = options.find(function (option) {\n            return option.element.current === document.activeElement;\n          });\n\n          if (_activeOption2) triggerChange(_activeOption2.propsRef.current.value);\n        }\n        break;\n    }\n  }, [radioGroupRef, options, triggerChange]);\n  var registerOption = useCallback(function (option) {\n    dispatch(_extends({\n      type: ActionTypes.RegisterOption\n    }, option));\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnregisterOption,\n        id: option.id\n      });\n    };\n  }, [dispatch]);\n  var api = useMemo(function () {\n    return {\n      registerOption: registerOption,\n      firstOption: firstOption,\n      containsCheckedOption: containsCheckedOption,\n      change: triggerChange,\n      disabled: disabled,\n      value: value\n    };\n  }, [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]);\n  var propsWeControl = {\n    ref: radioGroupRef,\n    id: id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, React.createElement(RadioGroupContext.Provider, {\n    value: api\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    defaultTag: DEFAULT_RADIO_GROUP_TAG,\n    name: 'RadioGroup'\n  }))));\n} // ---\n\n\nvar OptionState;\n\n(function (OptionState) {\n  OptionState[OptionState[\"Empty\"] = 1] = \"Empty\";\n  OptionState[OptionState[\"Active\"] = 2] = \"Active\";\n})(OptionState || (OptionState = {}));\n\nvar DEFAULT_OPTION_TAG = 'div';\n\nfunction Option(props) {\n  var optionRef = useRef(null);\n  var id = \"headlessui-radiogroup-option-\" + useId();\n\n  var _useLabels2 = useLabels(),\n      labelledby = _useLabels2[0],\n      LabelProvider = _useLabels2[1];\n\n  var _useDescriptions2 = useDescriptions(),\n      describedby = _useDescriptions2[0],\n      DescriptionProvider = _useDescriptions2[1];\n\n  var _useFlags = useFlags(OptionState.Empty),\n      addFlag = _useFlags.addFlag,\n      removeFlag = _useFlags.removeFlag,\n      hasFlag = _useFlags.hasFlag;\n\n  var value = props.value,\n      _props$disabled2 = props.disabled,\n      disabled = _props$disabled2 === void 0 ? false : _props$disabled2,\n      passThroughProps = _objectWithoutPropertiesLoose(props, [\"value\", \"disabled\"]);\n\n  var propsRef = useRef({\n    value: value,\n    disabled: disabled\n  });\n  useIsoMorphicEffect(function () {\n    propsRef.current.value = value;\n  }, [value, propsRef]);\n  useIsoMorphicEffect(function () {\n    propsRef.current.disabled = disabled;\n  }, [disabled, propsRef]);\n\n  var _useRadioGroupContext = useRadioGroupContext([RadioGroup.name, Option.name].join('.')),\n      registerOption = _useRadioGroupContext.registerOption,\n      radioGroupDisabled = _useRadioGroupContext.disabled,\n      change = _useRadioGroupContext.change,\n      firstOption = _useRadioGroupContext.firstOption,\n      containsCheckedOption = _useRadioGroupContext.containsCheckedOption,\n      radioGroupValue = _useRadioGroupContext.value;\n\n  useIsoMorphicEffect(function () {\n    return registerOption({\n      id: id,\n      element: optionRef,\n      propsRef: propsRef\n    });\n  }, [id, registerOption, optionRef, props]);\n  var handleClick = useCallback(function () {\n    var _optionRef$current;\n\n    if (!change(value)) return;\n    addFlag(OptionState.Active);\n    (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.focus();\n  }, [addFlag, change, value]);\n  var handleFocus = useCallback(function () {\n    return addFlag(OptionState.Active);\n  }, [addFlag]);\n  var handleBlur = useCallback(function () {\n    return removeFlag(OptionState.Active);\n  }, [removeFlag]);\n  var isFirstOption = (firstOption == null ? void 0 : firstOption.id) === id;\n  var isDisabled = radioGroupDisabled || disabled;\n  var checked = radioGroupValue === value;\n  var propsWeControl = {\n    ref: optionRef,\n    id: id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: function () {\n      if (isDisabled) return -1;\n      if (checked) return 0;\n      if (!containsCheckedOption && isFirstOption) return 0;\n      return -1;\n    }(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur\n  };\n  var slot = useMemo(function () {\n    return {\n      checked: checked,\n      disabled: isDisabled,\n      active: hasFlag(OptionState.Active)\n    };\n  }, [checked, isDisabled, hasFlag]);\n  return React.createElement(DescriptionProvider, {\n    name: \"RadioGroup.Description\"\n  }, React.createElement(LabelProvider, {\n    name: \"RadioGroup.Label\"\n  }, render({\n    props: _extends({}, passThroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'RadioGroup.Option'\n  })));\n} // ---\n\n\nRadioGroup.Option = Option;\nRadioGroup.Label = Label;\nRadioGroup.Description = Description;\nexport { RadioGroup };","map":{"version":3,"mappings":"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","names":["ActionTypes","reducers","RegisterOption","state","action","options","id","element","propsRef","UnregisterOption","slice","idx","findIndex","radio","splice","RadioGroupContext","createContext","displayName","useRadioGroupContext","component","context","useContext","err","Error","RadioGroup","name","captureStackTrace","stateReducer","match","type","DEFAULT_RADIO_GROUP_TAG","props","value","onChange","disabled","_props$disabled","passThroughProps","useReducer","dispatch","useLabels","labelledby","LabelProvider","useDescriptions","describedby","DescriptionProvider","useId","radioGroupRef","useRef","firstOption","useMemo","find","option","current","containsCheckedOption","some","triggerChange","useCallback","nextValue","nextOption","_options$find","useTreeWalker","container","accept","node","getAttribute","NodeFilter","FILTER_REJECT","hasAttribute","FILTER_SKIP","FILTER_ACCEPT","walk","setAttribute","handleKeyDown","event","all","filter","map","key","Keys","ArrowLeft","ArrowUp","preventDefault","stopPropagation","result","focusIn","Focus","Previous","WrapAround","FocusResult","Success","activeOption","document","activeElement","ArrowRight","ArrowDown","Next","Space","registerOption","api","change","propsWeControl","ref","role","onKeyDown","React","Provider","render","defaultTag","OptionState","DEFAULT_OPTION_TAG","Option","optionRef","useFlags","Empty","addFlag","removeFlag","hasFlag","_props$disabled2","useIsoMorphicEffect","join","radioGroupDisabled","radioGroupValue","handleClick","Active","focus","handleFocus","handleBlur","isFirstOption","isDisabled","checked","undefined","tabIndex","onClick","onFocus","onBlur","slot","active","Label","Description"],"sources":["C:\\Users\\Vasilis\\Documents\\nodetest\\wordle\\macwordle\\node_modules\\@headlessui\\react\\src\\components\\radio-group\\radio-group.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    'aria-disabled': isDisabled ? true : undefined,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n"]},"metadata":{},"sourceType":"module"}