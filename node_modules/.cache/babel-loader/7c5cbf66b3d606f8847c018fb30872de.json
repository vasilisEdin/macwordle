{"ast":null,"code":"function assertNever(x) {\n  throw new Error('Unexpected object: ' + x);\n}\n\nvar Focus;\n\n(function (Focus) {\n  /** Focus the first non-disabled item. */\n  Focus[Focus[\"First\"] = 0] = \"First\";\n  /** Focus the previous non-disabled item. */\n\n  Focus[Focus[\"Previous\"] = 1] = \"Previous\";\n  /** Focus the next non-disabled item. */\n\n  Focus[Focus[\"Next\"] = 2] = \"Next\";\n  /** Focus the last non-disabled item. */\n\n  Focus[Focus[\"Last\"] = 3] = \"Last\";\n  /** Focus a specific item based on the `id` of the item. */\n\n  Focus[Focus[\"Specific\"] = 4] = \"Specific\";\n  /** Focus no items at all. */\n\n  Focus[Focus[\"Nothing\"] = 5] = \"Nothing\";\n})(Focus || (Focus = {}));\n\nfunction calculateActiveIndex(action, resolvers) {\n  var items = resolvers.resolveItems();\n  if (items.length <= 0) return null;\n  var currentActiveIndex = resolvers.resolveActiveIndex();\n  var activeIndex = currentActiveIndex != null ? currentActiveIndex : -1;\n\n  var nextActiveIndex = function () {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(function (item) {\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Previous:\n        {\n          var idx = items.slice().reverse().findIndex(function (item, idx, all) {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false;\n            return !resolvers.resolveDisabled(item);\n          });\n          if (idx === -1) return idx;\n          return items.length - 1 - idx;\n        }\n\n      case Focus.Next:\n        return items.findIndex(function (item, idx) {\n          if (idx <= activeIndex) return false;\n          return !resolvers.resolveDisabled(item);\n        });\n\n      case Focus.Last:\n        {\n          var _idx = items.slice().reverse().findIndex(function (item) {\n            return !resolvers.resolveDisabled(item);\n          });\n\n          if (_idx === -1) return _idx;\n          return items.length - 1 - _idx;\n        }\n\n      case Focus.Specific:\n        return items.findIndex(function (item) {\n          return resolvers.resolveId(item) === action.id;\n        });\n\n      case Focus.Nothing:\n        return null;\n\n      default:\n        assertNever(action);\n    }\n  }();\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex;\n}\n\nexport { Focus, calculateActiveIndex };","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,CAAqBC,CAArB;AACE,QAAM,IAAIC,KAAJ,CAAU,wBAAwBD,CAAlC,CAAN;AACD;;IAEWE;;AAAZ,WAAYA,KAAZ,EAAYA;AACV;AACAA;AAEA;;AACAA;AAEA;;AACAA;AAEA;;AACAA;AAEA;;AACAA;AAEA;;AACAA;AAjBF,GAAYA,KAAK,KAALA,KAAK,MAAjB;;SAoBgBC,qBACdC,QACAC;AAOA,MAAIC,KAAK,GAAGD,SAAS,CAACE,YAAVF,EAAZ;AACA,MAAIC,KAAK,CAACE,MAANF,IAAgB,CAApB,EAAuB,OAAO,IAAP;AAEvB,MAAIG,kBAAkB,GAAGJ,SAAS,CAACK,kBAAVL,EAAzB;AACA,MAAIM,WAAW,GAAGF,kBAAH,QAAGA,wBAAsB,CAAC,CAAzC;;AAEA,MAAIG,eAAe,GAAI;AACrB,YAAQR,MAAM,CAACS,KAAf;AACE,WAAKX,KAAK,CAACY,KAAX;AACE,eAAOR,KAAK,CAACS,SAANT,CAAgB,gBAAI;AAAA,iBAAI,CAACD,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAL;AAApB,UAAP;;AAEF,WAAKH,KAAK,CAACgB,QAAX;AAAqB;AACnB,cAAIC,GAAG,GAAGb,KAAK,CACZc,KADOd,GAEPe,OAFOf,GAGPS,SAHOT,CAGG,UAACW,IAAD,EAAOE,GAAP,EAAYG,GAAZ;AACT,gBAAIX,WAAW,KAAK,CAAC,CAAjBA,IAAsBW,GAAG,CAACd,MAAJc,GAAaH,GAAbG,GAAmB,CAAnBA,IAAwBX,WAAlD,EAA+D,OAAO,KAAP;AAC/D,mBAAO,CAACN,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAR;AALM,YAAV;AAOA,cAAIc,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAOA,GAAP;AAChB,iBAAOb,KAAK,CAACE,MAANF,GAAe,CAAfA,GAAmBa,GAA1B;AACD;;AAED,WAAKjB,KAAK,CAACqB,IAAX;AACE,eAAOjB,KAAK,CAACS,SAANT,CAAgB,UAACW,IAAD,EAAOE,GAAP;AACrB,cAAIA,GAAG,IAAIR,WAAX,EAAwB,OAAO,KAAP;AACxB,iBAAO,CAACN,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAR;AAFK,UAAP;;AAKF,WAAKH,KAAK,CAACsB,IAAX;AAAiB;AACf,cAAIL,IAAG,GAAGb,KAAK,CACZc,KADOd,GAEPe,OAFOf,GAGPS,SAHOT,CAGG,gBAAI;AAAA,mBAAI,CAACD,SAAS,CAACW,eAAVX,CAA0BY,IAA1BZ,CAAL;AAHP,YAAV;;AAIA,cAAIc,IAAG,KAAK,CAAC,CAAb,EAAgB,OAAOA,IAAP;AAChB,iBAAOb,KAAK,CAACE,MAANF,GAAe,CAAfA,GAAmBa,IAA1B;AACD;;AAED,WAAKjB,KAAK,CAACuB,QAAX;AACE,eAAOnB,KAAK,CAACS,SAANT,CAAgB,gBAAI;AAAA,iBAAID,SAAS,CAACqB,SAAVrB,CAAoBY,IAApBZ,MAA8BD,MAAM,CAACuB,EAAzC;AAApB,UAAP;;AAEF,WAAKzB,KAAK,CAAC0B,OAAX;AACE,eAAO,IAAP;;AAEF;AACE7B,mBAAW,CAACK,MAAD,CAAXL;AAtCJ;AADoB,GAAC,EAAvB;;AA2CA,SAAOa,eAAe,KAAK,CAAC,CAArBA,GAAyBH,kBAAzBG,GAA8CA,eAArD;AACD","names":["assertNever","x","Error","Focus","calculateActiveIndex","action","resolvers","items","resolveItems","length","currentActiveIndex","resolveActiveIndex","activeIndex","nextActiveIndex","focus","First","findIndex","resolveDisabled","item","Previous","idx","slice","reverse","all","Next","Last","Specific","resolveId","id","Nothing"],"sources":["C:\\Users\\Vasilis\\Documents\\nodetest\\wordle\\AnyLanguage-Wordle\\node_modules\\@headlessui\\react\\src\\utils\\calculate-active-index.ts"],"sourcesContent":["function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n"]},"metadata":{},"sourceType":"module"}