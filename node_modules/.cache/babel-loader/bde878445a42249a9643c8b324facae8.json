{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState, useMemo, useEffect, Fragment, useContext, createContext, useRef, useCallback } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, RenderStrategy, Features } from '../../utils/render.esm.js';\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect.esm.js';\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { useIsMounted } from '../../hooks/use-is-mounted.esm.js';\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed.esm.js';\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render.esm.js';\nimport { transition, Reason } from './utils/transition.esm.js';\n\nfunction useSplitClasses(classes) {\n  if (classes === void 0) {\n    classes = '';\n  }\n\n  return useMemo(function () {\n    return classes.split(' ').filter(function (className) {\n      return className.trim().length > 1;\n    });\n  }, [classes]);\n}\n\nvar TransitionContext = /*#__PURE__*/createContext(null);\nTransitionContext.displayName = 'TransitionContext';\nvar TreeStates;\n\n(function (TreeStates) {\n  TreeStates[\"Visible\"] = \"visible\";\n  TreeStates[\"Hidden\"] = \"hidden\";\n})(TreeStates || (TreeStates = {}));\n\nfunction useTransitionContext() {\n  var context = useContext(TransitionContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.');\n  }\n\n  return context;\n}\n\nfunction useParentNesting() {\n  var context = useContext(NestingContext);\n\n  if (context === null) {\n    throw new Error('A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.');\n  }\n\n  return context;\n}\n\nvar NestingContext = /*#__PURE__*/createContext(null);\nNestingContext.displayName = 'NestingContext';\n\nfunction hasChildren(bag) {\n  if ('children' in bag) return hasChildren(bag.children);\n  return bag.current.filter(function (_ref) {\n    var state = _ref.state;\n    return state === TreeStates.Visible;\n  }).length > 0;\n}\n\nfunction useNesting(done) {\n  var doneRef = useRef(done);\n  var transitionableChildren = useRef([]);\n  var mounted = useIsMounted();\n  useEffect(function () {\n    doneRef.current = done;\n  }, [done]);\n  var unregister = useCallback(function (childId, strategy) {\n    var _match;\n\n    if (strategy === void 0) {\n      strategy = RenderStrategy.Hidden;\n    }\n\n    var idx = transitionableChildren.current.findIndex(function (_ref2) {\n      var id = _ref2.id;\n      return id === childId;\n    });\n    if (idx === -1) return;\n    match(strategy, (_match = {}, _match[RenderStrategy.Unmount] = function () {\n      transitionableChildren.current.splice(idx, 1);\n    }, _match[RenderStrategy.Hidden] = function () {\n      transitionableChildren.current[idx].state = TreeStates.Hidden;\n    }, _match));\n\n    if (!hasChildren(transitionableChildren) && mounted.current) {\n      doneRef.current == null ? void 0 : doneRef.current();\n    }\n  }, [doneRef, mounted, transitionableChildren]);\n  var register = useCallback(function (childId) {\n    var child = transitionableChildren.current.find(function (_ref3) {\n      var id = _ref3.id;\n      return id === childId;\n    });\n\n    if (!child) {\n      transitionableChildren.current.push({\n        id: childId,\n        state: TreeStates.Visible\n      });\n    } else if (child.state !== TreeStates.Visible) {\n      child.state = TreeStates.Visible;\n    }\n\n    return function () {\n      return unregister(childId, RenderStrategy.Unmount);\n    };\n  }, [transitionableChildren, unregister]);\n  return useMemo(function () {\n    return {\n      children: transitionableChildren,\n      register: register,\n      unregister: unregister\n    };\n  }, [register, unregister, transitionableChildren]);\n}\n\nfunction noop() {}\n\nvar eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'];\n\nfunction ensureEventHooksExist(events) {\n  var result = {};\n\n  for (var _iterator = _createForOfIteratorHelperLoose(eventNames), _step; !(_step = _iterator()).done;) {\n    var _events$name;\n\n    var name = _step.value;\n    result[name] = (_events$name = events[name]) != null ? _events$name : noop;\n  }\n\n  return result;\n}\n\nfunction useEvents(events) {\n  var eventsRef = useRef(ensureEventHooksExist(events));\n  useEffect(function () {\n    eventsRef.current = ensureEventHooksExist(events);\n  }, [events]);\n  return eventsRef;\n} // ---\n\n\nvar DEFAULT_TRANSITION_CHILD_TAG = 'div';\nvar TransitionChildRenderFeatures = Features.RenderStrategy;\n\nfunction TransitionChild(props) {\n  var _match3;\n\n  var beforeEnter = props.beforeEnter,\n      afterEnter = props.afterEnter,\n      beforeLeave = props.beforeLeave,\n      afterLeave = props.afterLeave,\n      enter = props.enter,\n      enterFrom = props.enterFrom,\n      enterTo = props.enterTo,\n      entered = props.entered,\n      leave = props.leave,\n      leaveFrom = props.leaveFrom,\n      leaveTo = props.leaveTo,\n      rest = _objectWithoutPropertiesLoose(props, [\"beforeEnter\", \"afterEnter\", \"beforeLeave\", \"afterLeave\", \"enter\", \"enterFrom\", \"enterTo\", \"entered\", \"leave\", \"leaveFrom\", \"leaveTo\"]);\n\n  var container = useRef(null);\n\n  var _useState = useState(TreeStates.Visible),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden;\n\n  var _useTransitionContext = useTransitionContext(),\n      show = _useTransitionContext.show,\n      appear = _useTransitionContext.appear,\n      initial = _useTransitionContext.initial;\n\n  var _useParentNesting = useParentNesting(),\n      register = _useParentNesting.register,\n      unregister = _useParentNesting.unregister;\n\n  var id = useId();\n  var isTransitioning = useRef(false);\n  var nesting = useNesting(function () {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden);\n      unregister(id);\n      events.current.afterLeave();\n    }\n  });\n  useIsoMorphicEffect(function () {\n    if (!id) return;\n    return register(id);\n  }, [register, id]);\n  useIsoMorphicEffect(function () {\n    var _match2; // If we are in another mode than the Hidden mode then ignore\n\n\n    if (strategy !== RenderStrategy.Hidden) return;\n    if (!id) return; // Make sure that we are visible\n\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible);\n      return;\n    }\n\n    match(state, (_match2 = {}, _match2[TreeStates.Hidden] = function () {\n      return unregister(id);\n    }, _match2[TreeStates.Visible] = function () {\n      return register(id);\n    }, _match2));\n  }, [state, id, register, unregister, show, strategy]);\n  var enterClasses = useSplitClasses(enter);\n  var enterFromClasses = useSplitClasses(enterFrom);\n  var enterToClasses = useSplitClasses(enterTo);\n  var enteredClasses = useSplitClasses(entered);\n  var leaveClasses = useSplitClasses(leave);\n  var leaveFromClasses = useSplitClasses(leaveFrom);\n  var leaveToClasses = useSplitClasses(leaveTo);\n  var events = useEvents({\n    beforeEnter: beforeEnter,\n    afterEnter: afterEnter,\n    beforeLeave: beforeLeave,\n    afterLeave: afterLeave\n  });\n  var ready = useServerHandoffComplete();\n  useEffect(function () {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?');\n    }\n  }, [container, state, ready]); // Skipping initial transition\n\n  var skip = initial && !appear;\n  useIsoMorphicEffect(function () {\n    var node = container.current;\n    if (!node) return;\n    if (skip) return;\n    isTransitioning.current = true;\n    if (show) events.current.beforeEnter();\n    if (!show) events.current.beforeLeave();\n    return show ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, function (reason) {\n      isTransitioning.current = false;\n      if (reason === Reason.Finished) events.current.afterEnter();\n    }) : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, function (reason) {\n      isTransitioning.current = false;\n      if (reason !== Reason.Finished) return; // When we don't have children anymore we can safely unregister from the parent and hide\n      // ourselves.\n\n      if (!hasChildren(nesting)) {\n        setState(TreeStates.Hidden);\n        unregister(id);\n        events.current.afterLeave();\n      }\n    });\n  }, [events, id, isTransitioning, unregister, nesting, container, skip, show, enterClasses, enterFromClasses, enterToClasses, leaveClasses, leaveFromClasses, leaveToClasses]);\n  var propsWeControl = {\n    ref: container\n  };\n  var passthroughProps = rest;\n  return React.createElement(NestingContext.Provider, {\n    value: nesting\n  }, React.createElement(OpenClosedProvider, {\n    value: match(state, (_match3 = {}, _match3[TreeStates.Visible] = State.Open, _match3[TreeStates.Hidden] = State.Closed, _match3))\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n    features: TransitionChildRenderFeatures,\n    visible: state === TreeStates.Visible,\n    name: 'Transition.Child'\n  })));\n}\n\nfunction Transition(props) {\n  // @ts-expect-error\n  var show = props.show,\n      _props$appear = props.appear,\n      appear = _props$appear === void 0 ? false : _props$appear,\n      unmount = props.unmount,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"show\", \"appear\", \"unmount\"]);\n\n  var usesOpenClosedState = useOpenClosed();\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    var _match4;\n\n    show = match(usesOpenClosedState, (_match4 = {}, _match4[State.Open] = true, _match4[State.Closed] = false, _match4));\n  }\n\n  if (![true, false].includes(show)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.');\n  }\n\n  var _useState2 = useState(show ? TreeStates.Visible : TreeStates.Hidden),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var nestingBag = useNesting(function () {\n    setState(TreeStates.Hidden);\n  });\n  var initial = useIsInitialRender();\n  var transitionBag = useMemo(function () {\n    return {\n      show: show,\n      appear: appear || !initial,\n      initial: initial\n    };\n  }, [show, appear, initial]);\n  useEffect(function () {\n    if (show) {\n      setState(TreeStates.Visible);\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden);\n    }\n  }, [show, nestingBag]);\n  var sharedProps = {\n    unmount: unmount\n  };\n  return React.createElement(NestingContext.Provider, {\n    value: nestingBag\n  }, React.createElement(TransitionContext.Provider, {\n    value: transitionBag\n  }, render({\n    props: _extends({}, sharedProps, {\n      as: Fragment,\n      children: React.createElement(TransitionChild, Object.assign({}, sharedProps, passthroughProps))\n    }),\n    defaultTag: Fragment,\n    features: TransitionChildRenderFeatures,\n    visible: state === TreeStates.Visible,\n    name: 'Transition'\n  })));\n}\n\nTransition.Child = function Child(props) {\n  var hasTransitionContext = useContext(TransitionContext) !== null;\n  var hasOpenClosedContext = useOpenClosed() !== null;\n  return !hasTransitionContext && hasOpenClosedContext ? React.createElement(Transition, Object.assign({}, props)) : React.createElement(TransitionChild, Object.assign({}, props));\n};\n\nTransition.Root = Transition;\nexport { Transition };","map":{"version":3,"mappings":"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","names":["useSplitClasses","classes","useMemo","split","filter","className","trim","length","TransitionContext","createContext","displayName","TreeStates","useTransitionContext","context","useContext","Error","useParentNesting","NestingContext","hasChildren","bag","children","current","state","Visible","useNesting","done","doneRef","useRef","transitionableChildren","mounted","useIsMounted","useEffect","unregister","useCallback","childId","strategy","RenderStrategy","Hidden","idx","findIndex","id","match","Unmount","splice","register","child","find","push","noop","eventNames","ensureEventHooksExist","events","result","name","useEvents","eventsRef","DEFAULT_TRANSITION_CHILD_TAG","TransitionChildRenderFeatures","Features","TransitionChild","props","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","entered","leave","leaveFrom","leaveTo","rest","container","useState","setState","unmount","show","appear","initial","useId","isTransitioning","nesting","useIsoMorphicEffect","enterClasses","enterFromClasses","enterToClasses","enteredClasses","leaveClasses","leaveFromClasses","leaveToClasses","ready","useServerHandoffComplete","skip","node","transition","reason","Reason","Finished","propsWeControl","ref","passthroughProps","React","Provider","value","OpenClosedProvider","State","Open","Closed","render","defaultTag","features","visible","Transition","_props$appear","usesOpenClosedState","useOpenClosed","undefined","includes","nestingBag","useIsInitialRender","transitionBag","sharedProps","as","Fragment","Child","hasTransitionContext","hasOpenClosedContext","Root"],"sources":["C:\\Users\\Vasilis\\Documents\\nodetest\\wordle\\AnyLanguage-Wordle\\node_modules\\@headlessui\\react\\src\\components\\transitions\\transition.tsx"],"sourcesContent":["import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n  initial: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  entered?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    entered,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear, initial } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let enteredClasses = useSplitClasses(entered)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, enteredClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial, initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = function Child<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let hasTransitionContext = useContext(TransitionContext) !== null\n  let hasOpenClosedContext = useOpenClosed() !== null\n\n  return !hasTransitionContext && hasOpenClosedContext ? (\n    <Transition {...props} />\n  ) : (\n    <TransitionChild {...props} />\n  )\n}\nTransition.Root = Transition\n"]},"metadata":{},"sourceType":"module"}