{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Vasilis\\\\Documents\\\\GitHub\\\\vasilisEdin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import{loadStatsFromLocalStorage,saveStatsToLocalStorage}from'./localStorage';import{CONFIG}from'../constants/config';// In stats array elements 0-5 are successes in 1-6 trys\nexport var addStatsForCompletedGame=function addStatsForCompletedGame(gameStats,count){// Count is number of incorrect guesses before end.\nvar stats=_objectSpread({},gameStats);stats.totalGames+=1;if(count>CONFIG.tries-1){// A fail situation\nstats.currentStreak=0;stats.gamesFailed+=1;}else{stats.winDistribution[count]+=1;stats.currentStreak+=1;if(stats.bestStreak<stats.currentStreak){stats.bestStreak=stats.currentStreak;}}stats.successRate=getSuccessRate(stats);saveStatsToLocalStorage(stats);return stats;};var defaultStats={winDistribution:[0,0,0,0,0,0],gamesFailed:0,currentStreak:0,bestStreak:0,totalGames:0,successRate:0};export var loadStats=function loadStats(){return loadStatsFromLocalStorage()||defaultStats;};var getSuccessRate=function getSuccessRate(gameStats){var totalGames=gameStats.totalGames,gamesFailed=gameStats.gamesFailed;return Math.round(100*(totalGames-gamesFailed)/Math.max(totalGames,1));};","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/GitHub/vasilisEdin/src/lib/stats.ts"],"names":["loadStatsFromLocalStorage","saveStatsToLocalStorage","CONFIG","addStatsForCompletedGame","gameStats","count","stats","totalGames","tries","currentStreak","gamesFailed","winDistribution","bestStreak","successRate","getSuccessRate","defaultStats","loadStats","Math","round","max"],"mappings":"6IAAA,OAEEA,yBAFF,CAGEC,uBAHF,KAIO,gBAJP,CAMA,OAASC,MAAT,KAAuB,qBAAvB,CAEA;AAEA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CACtCC,SADsC,CAEtCC,KAFsC,CAGnC,CACH;AACA,GAAMC,CAAAA,KAAK,kBAAQF,SAAR,CAAX,CAEAE,KAAK,CAACC,UAAN,EAAoB,CAApB,CAEA,GAAIF,KAAK,CAAGH,MAAM,CAACM,KAAP,CAAe,CAA3B,CAA8B,CAC5B;AACAF,KAAK,CAACG,aAAN,CAAsB,CAAtB,CACAH,KAAK,CAACI,WAAN,EAAqB,CAArB,CACD,CAJD,IAIO,CACLJ,KAAK,CAACK,eAAN,CAAsBN,KAAtB,GAAgC,CAAhC,CACAC,KAAK,CAACG,aAAN,EAAuB,CAAvB,CAEA,GAAIH,KAAK,CAACM,UAAN,CAAmBN,KAAK,CAACG,aAA7B,CAA4C,CAC1CH,KAAK,CAACM,UAAN,CAAmBN,KAAK,CAACG,aAAzB,CACD,CACF,CAEDH,KAAK,CAACO,WAAN,CAAoBC,cAAc,CAACR,KAAD,CAAlC,CAEAL,uBAAuB,CAACK,KAAD,CAAvB,CACA,MAAOA,CAAAA,KAAP,CACD,CA1BM,CA4BP,GAAMS,CAAAA,YAAuB,CAAG,CAC9BJ,eAAe,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CADa,CAE9BD,WAAW,CAAE,CAFiB,CAG9BD,aAAa,CAAE,CAHe,CAI9BG,UAAU,CAAE,CAJkB,CAK9BL,UAAU,CAAE,CALkB,CAM9BM,WAAW,CAAE,CANiB,CAAhC,CASA,MAAO,IAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B,MAAOhB,CAAAA,yBAAyB,IAAMe,YAAtC,CACD,CAFM,CAIP,GAAMD,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACV,SAAD,CAA0B,CAC/C,GAAQG,CAAAA,UAAR,CAAoCH,SAApC,CAAQG,UAAR,CAAoBG,WAApB,CAAoCN,SAApC,CAAoBM,WAApB,CAEA,MAAOO,CAAAA,IAAI,CAACC,KAAL,CACJ,KAAOX,UAAU,CAAGG,WAApB,CAAD,CAAqCO,IAAI,CAACE,GAAL,CAASZ,UAAT,CAAqB,CAArB,CADhC,CAAP,CAGD,CAND","sourcesContent":["import {\n  GameStats,\n  loadStatsFromLocalStorage,\n  saveStatsToLocalStorage,\n} from './localStorage'\n\nimport { CONFIG } from '../constants/config'\n\n// In stats array elements 0-5 are successes in 1-6 trys\n\nexport const addStatsForCompletedGame = (\n  gameStats: GameStats,\n  count: number\n) => {\n  // Count is number of incorrect guesses before end.\n  const stats = { ...gameStats }\n\n  stats.totalGames += 1\n\n  if (count > CONFIG.tries - 1) {\n    // A fail situation\n    stats.currentStreak = 0\n    stats.gamesFailed += 1\n  } else {\n    stats.winDistribution[count] += 1\n    stats.currentStreak += 1\n\n    if (stats.bestStreak < stats.currentStreak) {\n      stats.bestStreak = stats.currentStreak\n    }\n  }\n\n  stats.successRate = getSuccessRate(stats)\n\n  saveStatsToLocalStorage(stats)\n  return stats\n}\n\nconst defaultStats: GameStats = {\n  winDistribution: [0, 0, 0, 0, 0, 0],\n  gamesFailed: 0,\n  currentStreak: 0,\n  bestStreak: 0,\n  totalGames: 0,\n  successRate: 0,\n}\n\nexport const loadStats = () => {\n  return loadStatsFromLocalStorage() || defaultStats\n}\n\nconst getSuccessRate = (gameStats: GameStats) => {\n  const { totalGames, gamesFailed } = gameStats\n\n  return Math.round(\n    (100 * (totalGames - gamesFailed)) / Math.max(totalGames, 1)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}