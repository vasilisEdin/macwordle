{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vasilis\\\\Documents\\\\nodetest\\\\wordle\\\\AnyLanguage-Wordle\\\\src\\\\components\\\\grid\\\\Grid.tsx\";\nimport { CompletedRow } from './CompletedRow';\nimport { CurrentRow } from './CurrentRow';\nimport { EmptyRow } from './EmptyRow';\nimport { CONFIG } from '../../constants/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Grid = _ref => {\n  let {\n    guesses,\n    currentGuess\n  } = _ref;\n  const empties = guesses.length < CONFIG.tries - 1 ? Array.from(Array(CONFIG.tries - 1 - guesses.length)) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pb-6\",\n    children: [guesses.map((guess, i) => /*#__PURE__*/_jsxDEV(CompletedRow, {\n      guess: guess\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)), guesses.length < CONFIG.tries && /*#__PURE__*/_jsxDEV(CurrentRow, {\n      guess: currentGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 41\n    }, this), empties.map((_, i) => /*#__PURE__*/_jsxDEV(EmptyRow, {}, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/Vasilis/Documents/nodetest/wordle/AnyLanguage-Wordle/src/components/grid/Grid.tsx"],"names":["CompletedRow","CurrentRow","EmptyRow","CONFIG","Grid","guesses","currentGuess","empties","length","tries","Array","from","map","guess","i","_"],"mappings":";AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,MAAT,QAAuB,wBAAvB;;AAOA,OAAO,MAAMC,IAAI,GAAG,QAAsC;AAAA,MAArC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAqC;AACxD,QAAMC,OAAO,GACXF,OAAO,CAACG,MAAR,GAAiBL,MAAM,CAACM,KAAP,GAAe,CAAhC,GACIC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACP,MAAM,CAACM,KAAP,GAAe,CAAf,GAAmBJ,OAAO,CAACG,MAA5B,CAAhB,CADJ,GAEI,EAHN;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eACGH,OAAO,CAACO,GAAR,CAAY,CAACC,KAAD,EAAQC,CAAR,kBACX,QAAC,YAAD;AAAsB,MAAA,KAAK,EAAED;AAA7B,OAAmBC,CAAnB;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAIGT,OAAO,CAACG,MAAR,GAAiBL,MAAM,CAACM,KAAxB,iBAAiC,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEH;AAAnB;AAAA;AAAA;AAAA;AAAA,YAJpC,EAKGC,OAAO,CAACK,GAAR,CAAY,CAACG,CAAD,EAAID,CAAJ,kBACX,QAAC,QAAD,MAAeA,CAAf;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjBM;KAAMV,I","sourcesContent":["import { CompletedRow } from './CompletedRow'\nimport { CurrentRow } from './CurrentRow'\nimport { EmptyRow } from './EmptyRow'\nimport { CONFIG } from '../../constants/config'\n\ntype Props = {\n  guesses: string[][]\n  currentGuess: string[]\n}\n\nexport const Grid = ({ guesses, currentGuess }: Props) => {\n  const empties =\n    guesses.length < CONFIG.tries - 1\n      ? Array.from(Array(CONFIG.tries - 1 - guesses.length))\n      : []\n\n  return (\n    <div className=\"pb-6\">\n      {guesses.map((guess, i) => (\n        <CompletedRow key={i} guess={guess} />\n      ))}\n      {guesses.length < CONFIG.tries && <CurrentRow guess={currentGuess} />}\n      {empties.map((_, i) => (\n        <EmptyRow key={i} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}