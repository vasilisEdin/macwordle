{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\n\nfunction useTreeWalker(_ref) {\n  var container = _ref.container,\n      accept = _ref.accept,\n      walk = _ref.walk,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled;\n  var acceptRef = useRef(accept);\n  var walkRef = useRef(walk);\n  useEffect(function () {\n    acceptRef.current = accept;\n    walkRef.current = walk;\n  }, [accept, walk]);\n  useIsoMorphicEffect(function () {\n    if (!container) return;\n    if (!enabled) return;\n    var accept = acceptRef.current;\n    var walk = walkRef.current;\n    var acceptNode = Object.assign(function (node) {\n      return accept(node);\n    }, {\n      acceptNode: accept\n    });\n    var walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false);\n\n    while (walker.nextNode()) {\n      walk(walker.currentNode);\n    }\n  }, [container, enabled, acceptRef, walkRef]);\n}\n\nexport { useTreeWalker };","map":{"version":3,"mappings":";;;SAUgBA;MACdC;MACAC;MACAC;0BACAC;MAAAA,oCAAU,IAAVA,GAAUC;AAOV,MAAIC,SAAS,GAAGC,MAAM,CAACL,MAAD,CAAtB;AACA,MAAIM,OAAO,GAAGD,MAAM,CAACJ,IAAD,CAApB;AAEAM,WAAS,CAAC;AACRH,aAAS,CAACI,OAAVJ,GAAoBJ,MAApBI;AACAE,WAAO,CAACE,OAARF,GAAkBL,IAAlBK;AAFO,KAGN,CAACN,MAAD,EAASC,IAAT,CAHM,CAATM;AAKAE,qBAAmB,CAAC;AAClB,QAAI,CAACV,SAAL,EAAgB;AAChB,QAAI,CAACG,OAAL,EAAc;AAEd,QAAIF,MAAM,GAAGI,SAAS,CAACI,OAAvB;AACA,QAAIP,IAAI,GAAGK,OAAO,CAACE,OAAnB;AAEA,QAAIE,UAAU,GAAGC,MAAM,CAACC,MAAPD,CAAc,UAACE,IAAD;AAAA,aAAuBb,MAAM,CAACa,IAAD,CAA7B;AAAd,OAAmD;AAAEH,gBAAU,EAAEV;AAAd,KAAnDW,CAAjB;AACA,QAAIG,MAAM,GAAGC,QAAQ,CAACC,gBAATD,CAA0BhB,SAA1BgB,EAAqCE,UAAU,CAACC,YAAhDH,EAA8DL,UAA9DK,EAA0E,KAA1EA,CAAb;;AAEA,WAAOD,MAAM,CAACK,QAAPL,EAAP;AAA0Bb,UAAI,CAACa,MAAM,CAACM,WAAR,CAAJnB;AAA1B;AAViB,KAWhB,CAACF,SAAD,EAAYG,OAAZ,EAAqBE,SAArB,EAAgCE,OAAhC,CAXgB,CAAnBG;AAYD","names":["useTreeWalker","container","accept","walk","enabled","_ref$enabled","acceptRef","useRef","walkRef","useEffect","current","useIsoMorphicEffect","acceptNode","Object","assign","node","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode"],"sources":["C:\\Users\\Vasilis\\Documents\\nodetest\\wordle\\macwordle\\node_modules\\@headlessui\\react\\src\\hooks\\use-tree-walker.ts"],"sourcesContent":["import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n"]},"metadata":{},"sourceType":"module"}